# -*- coding: utf-8 -*-"""Created on Fri Mar 25 15:46:30 2016@author: NeoDivide the sources into 4 groups, each has the equal spherical area.And Normalized according to the apparent proper motion"""#read the apparent proper motion of sourcesfrom Data_Load import Rank_Load, Apm_Loadimport numpy as np##dat_fil = 'NC3.rank'##[Sou, V, V_err, V_RA,V_Dec, Va_E, Vd_E, RA, Dec] = Rank_Load(dat_fil)#ex_dir = '../results/'## 4 groups#nodes = [-90, -30, 0, 30, 90]#for i in range(len(nodes)-1):#    sou = []#    v   = []#    for j in range(len(Sou)):#        if nodes[i] < Dec[j] < nodes[i+1]:#            sou.append(Sou[j])#            v.append(V[j])#       #    vm = max(v)#    v1 = np.matrix(v)#    ind = v1/vm*100#    ind = ind[0]#    print ind[0,9]#    print len(sou)#    #    ex = 'groups' + str(i+1) +'.cat'#    fex = open(ex_dir + ex, 'w')#    for k in range(len(sou)):#        print >>fex, sou[k] + "    %4.2f    %3.1f"%(v[k], ind[0,k])           #    fex.close()        ##rewrite at Wed Mar 30 10:42:16 CST 2016## 4 groups, find the Vm#vm= []#nodes = [-90, -30, 0, 30, 90]#for i in range(len(nodes)-1):#    v   = []#    for j in range(len(V)):#        if nodes[i] < Dec[j] < nodes[i+1]:#            v.append(V[j])#       #    vm.append(max(v))#    print len(v)#    #dat =[]    #for j in range(len(nodes)-1):#    vmax = vm[j]#    for i in range(len(V)):#        if nodes[j] < Dec[i] < nodes[j+1]:#            dat.append((Sou[i], V[i], V_err[i],\#        RA[i], V_RA[i], Va_E[i], Dec[i], V_Dec[i],Vd_E[i], V[i]/vmax*100))#        #dtype = [('sou', 'S10'), ('u', float), ('u_e', float),\#        ('alp', float), ('ua', float), ('ua_e', float),\#        ('det', float), ('ud', float), ('ud_e', float), ('index',float), ('nu', float)]##a = np.array(dat, dtype=dtype)        #b = np.sort(a, order=['index']) ##res_dir = '../results/'#res = 'NC3g.rank'#fres = open(res_dir + res,'w')##for i in range(len(b)):#    print >> fres, b[i][0]+\#"   %10.4f    %10.4f  %10.4f    %10.4f  %10.4f  %10.4f  %10.4f  %10.4f"\#%(b[i][1],b[i][2],b[i][3],b[i][4],b[i][5],b[i][6],b[i][7],b[i][8])###fres.close()#print 'Done!'##This code is written for ranking sources by groupsdat_fil = '549_sou.apm'[Sou, V, V_err, V_RA,V_Dec, Va_E, Vd_E, RA, Dec] = Apm_Load(dat_fil)dat1 = []dat2 = []dat3 = []dat4 = []for i in range(len(Sou)):    if Dec[i] < -30:        dat1.append((Sou[i], V[i], V_err[i],\        RA[i], V_RA[i], Va_E[i], Dec[i], V_Dec[i],Vd_E[i], V[i]/V_err[i]))    elif Dec[i] < 0:        dat2.append((Sou[i], V[i], V_err[i],\        RA[i], V_RA[i], Va_E[i], Dec[i], V_Dec[i],Vd_E[i], V[i]/V_err[i]))    elif Dec[i] < 30:        dat3.append((Sou[i], V[i], V_err[i],\        RA[i], V_RA[i], Va_E[i], Dec[i], V_Dec[i],Vd_E[i], V[i]/V_err[i]))    else :        dat4.append((Sou[i], V[i], V_err[i],\        RA[i], V_RA[i], Va_E[i], Dec[i], V_Dec[i],Vd_E[i], V[i]/V_err[i]))dtype = [('sou', 'S10'), ('u', float), ('u_e', float),\        ('alp', float), ('ua', float), ('ua_e', float),\        ('det', float), ('ud', float), ('ud_e', float), ('nu', float)]        a = np.array(dat1, dtype=dtype)        b1 = np.sort(a, order=['nu']) a = np.array(dat2, dtype=dtype)        b2 = np.sort(a, order=['nu']) a = np.array(dat3, dtype=dtype)        b3 = np.sort(a, order=['nu']) a = np.array(dat4, dtype=dtype)        b4 = np.sort(a, order=['nu']) res_dir = '../results/'res = 'GR.rank'fres = open(res_dir + res,'w')[N1, N2, N3, N4] = [len(b1), len(b2), len(b3), len(b4)]#[N1, N2, N3, N4] = [77, 126, 161, 135] for 499sources#108 132 181 163 for 584sources#105 129 176 159 for 569sources#101 127 168 153 for 549sourcesprint len(b1), len(b2), len(b3), len(b4)i = 0while i < N3:    if i < N1:        b = np.sort([b1[i], b2[i], b3[i], b4[i]], order=['nu'])    elif i<N2:        b = np.sort([b2[i], b3[i], b4[i]], order=['nu'])    elif i<N4:        b = np.sort([b3[i], b4[i]], order=['nu'])    else:        b = [b3[i]]    for j in range(len(b)):        print >> fres, b[j][0]+\"   %10.4f    %10.4f  %10.4f    %10.4f  %10.4f  %10.4f  %10.4f  %10.4f"\%(b[j][1],b[j][2],b[j][3],b[j][4],b[j][5],b[j][6],b[j][7],b[j][8])        i += 1fres.close()print 'Done!'